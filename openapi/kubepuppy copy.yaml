openapi: 3.0.0
info:
  version: 1.0.0
  title: KubePuppy API
paths:
  '/certificate/validate':
    post:
      tags:
        - certificate
      summary: Shows details regarding the specified certificate (validity and assigned roles and permissions).
      operationId: validateCertificate
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
      requestBody:
        $ref: '#/components/requestBodies/CertificateUpload'
  '/subjects':
    get:
      tags:
        - subject
      summary: Lists all subjects.
      operationId: listSubjects
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                required: true
                items:
                  $ref: '#/components/schemas/Subject'
                  required: true
  '/subject/{subjectId}':
    get:
      tags:
        - subject
      summary: Gets details regarding the specified subject.
      operationId: getSubject
      parameters:
        - name: subjectId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubjectDetails'
                required: true
  '/roleBindings':
    get:
      tags:
        - roleBinding
      summary: Lists all role bindings (both cluster and namespaced).
      operationId: listRoleBindings
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                required: true
                items:
                  $ref: '#/components/schemas/RoleBinding'
                  required: true
  '/roleBinding/{roleBindingId}':
    delete:
      tags:
        - roleBinding
      summary: Deletes the specified role binding.
      operationId: deleteRoleBinding
      parameters:
        - name: roleBindingId
          in: path
          required: true
          schema:
            type: string
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generate exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
            pattern: '^[a-zA-Z0-9]+[a-zA-Z0-9\.\-_]*[a-zA-Z0-9]+$'
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            Set-Cookie:
              description: >-
                Cookie authentication key for use with the `api_key`
                apiKey authentication.
              schema:
                type: string
                example: AUTH_KEY=abcde12345; Path=/; HttpOnly
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      security:
        - api_key: []
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      security:
        - api_key: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - api_key: []
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  requestBodies:
    CertificateUpload:
      content:
        application/json:
          schema:
            type: string
            description: "X.509 certificate data"
            required: true    
  schemas:
    CertificateDetails:
      type: object
      properties:
        data:
          type: string
          description: "X.509 certificate data"
          required: true
        subject:
          type: string
          description: "X.509 subject (in string format)"
          required: true
        subjectCommonName:
          type: string
        subjectOrganization:
          type: string
        issuer:
          type: string
          description: "X.509 issuer (in string format)"
        isAuthorised:
          type: boolean
          description: "Whether certificate is signed by cluster CA (and so can be used for K8S RBAC)"
          required: true
        matchingClusterRoles:
          type: boolean
          description: "A list of all "
          required: true
    Subject:
      type: object
      properties:
        qualifiedName:
          type: string
          required: true
          description: "The full, unambiguous name of this subject"
        kind:
          type: string
          enum: [User, Group, ServiceAccount]
          required: true
        name:
          type: string
          required: true
        namespace:
          type: string
          description: "For a ServiceAccount, the account namespace. Null for Users and Groups"
        roles:
          type: array
          required: true
          items:
            $ref: '#/components/schemas/SubjectRole'
            required: true
          description: "For a ServiceAccount, the account namespace. Null for Users and Groups"
    SubjectRole:
      type: object
      properties:
        qualifiedName:
          type: string
          required: true
          description: "The full, unambiguous name of this subject"
        kind:
          type: string
          enum: [User, Group, ServiceAccount]
          required: true
        name:
          type: string
          required: true
        namespace:
          type: string
          description: "For a ServiceAccount, the account namespace. Null for Users and Groups"
    Category:
      title: Pet category
      description: A category for a pet
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          pattern: '^[a-zA-Z0-9]+[a-zA-Z0-9\.\-_]*[a-zA-Z0-9]+$'
      xml:
        name: Category
    User:
      title: a User
      description: A User who is purchasing from the pet store
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      title: Pet Tag
      description: A tag for a pet
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      title: a Pet
      description: A pet for sale in the pet store
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          deprecated: true
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      title: An uploaded response
      description: Describes the result of uploading an image resource
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
